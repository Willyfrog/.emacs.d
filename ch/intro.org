* Emacs the shortway

[[file:../img/emacs-intro.png]]

Oh! Emacs, el sistema operativo que resulta que tiene un editor
incorporado y al que solo le falta el [[http://www.teuton.org/~ejm/emacsicon/][fregadero de la cocina]], aunque
incomprendido por muchos, alabado por otros y quizás hasta [[https://plus.google.com/%2BLinusTorvalds/posts/iySKQGtkmtb][odiados por
alguna minoría]] es, desde luego, una pieza de software que no te
dejará indiferente.

¿Qué es Emacs?: un intérprete de [[http://es.wikipedia.org/wiki/Emacs_Lisp][EmacsLisp]].

A diferencia de otros editores, Emacs "no utiliza un lenguaje de
extensión" junto a una API que puedes usar para escribir extensiones,
es más correcto pensar en Emacs como un intérprete sobre el cual se ha
construido un framework para editar texto pero nada le impide ampliar
este framework para soportar otras tareas como interactuar con una
base de datos o con un terminal o con un servidor de mensajería.

Analizando con [[http://www.dwheeler.com/sloccount/][sloccount]] el código fuente de Emacs:

#+BEGIN_SRC sh
  Totals grouped by language (dominant language first):
  lisp:       1068797 (77.75%)
  ansic:       280312 (20.39%)
  objc:         15002 (1.09%)
  sh:            6263 (0.46%)
  perl:          1277 (0.09%)
  pascal:        1010 (0.07%)
  cs:             770 (0.06%)
  cpp:            528 (0.04%)
  awk:            477 (0.03%)
  ruby:           257 (0.02%)
  java:            27 (0.00%)
#+END_SRC

vemos que cerca del 20% del código está escrito en C (unas 280312
líneas), esto es básicamente la implementación de un intérprete de
EmacsLisp. El casi 78% restante es código EmacsLisp (alrededor de 1
millón de líneas) que no es más que el framework que le da el caracter
de editor de texto entre otras cosas a Emacs.

De hecho, generar el ejecutable de Emacs requiere dos pasos:

1. Compilar el código C que genera un ejecutable llamado ~temacs~ y
   que es puramente un intérprete de EmacsLisp + rutinas de I/O.
2. El ejecutable ~temacs~ carga la librería estándard escrita
   EmacsLisp y vuelca todo a un ejecutable con esas librerías
   pre-cargadas por razones de eficiencia.
  
Al último ejecutable es a lo que conocemos como Emacs.

¿Qué diferencia significa el hecho que sea un intérprete?

Significa que ABSOLUTAMENTE TODO lo que haces en el programa, en
última instancia, invoca a una función escrita en EmacsLisp (la
mayoría) o en C (por razones de eficiencia).

Por ejemplo, el atajo de teclado ~<Alt> - m~ posiciona el cursor en el
primer caracter de la línea que sea un espacio o un tabulador, pero si buscamos la ayuda de este comando nos dice lo siguiente:

#+BEGIN_SRC
M-m runs the command back-to-indentation, which is an interactive
compiled Lisp function in `simple.el'.

It is bound to M-m.

(back-to-indentation)

Move point to the first non-whitespace character on this line.
#+END_SRC

Es decir, que la funcionalidad tiene un nombre, está definida en un
sitio concreto, puedes acceder a su documentación (parte de la
documentación no es más que el /docstring/ de la función) y mejor aún
Emacs sabe a qué atajo está asociada aún cuando cambies el atajo por
otro o hacer lo contrario, crear tu propia versión de la función y que
Emacs utilice esa para lo cual ni tienes que reiniciar el programa ni
compilar nada, solo evaluar (recuerda que es un intérprete) la función
que defines y listo : este es el gran conocimiento que Emacs tiene
sobre sí mismo y el hecho de que puedas programar o reprogramar todo
el programa (incluyendo las funciones escritas en C)!

La misma funcionalidad en [[http://www.vim.org/][VIM]] por ejemplo está mapeada
a al atajo ~^~ en modo normal, si buscamos la ayuda del comando
(~:help ^~) obtenemos lo siguiente:

#+BEGIN_SRC
                                                             ^
^                       To the first non-blank character of the line.
                        exclusive motion.
#+END_SRC

Para VIM ~^~ es simplemente ~^~, no tiene un nombre como en el caso de
Emacs ni un sitio en concreto en el que puedas ver cómo se implementa
y la ayuda no es más que una sección de un fichero de texto estático
que alguien escribió, no es un "sistema vivo" en la forma en que Emacs
lo es.

/Disclaimer/: No intento iniciar otra guerra santa, he utilizado como
ejemplo VIM porque es lo que utilizaba antes.

** Terminología
*** modo
Citando a [[http://es.wikipedia.org/wiki/Emacs#Modos_de_edici.C3.B3n][Wikipedia]]:

#+BEGIN_QUOTE
Emacs adapta su comportamiento al tipo de texto que está editando
mediante modos de edición llamados "modos mayores" ("major
modes"). Los modos mayores se definen para textos de texto ordinario,
código fuente para diversos lenguajes de programación, documentos
HTML, TeX y LaTeX y muchos otros tipos de texto. Cada modo mayor
modifica ciertas variables en Lisp para que Emacs se comporte de forma
más conveniente para ese tipo concreto de texto. Los modos mayores
también ofrecen comandos especiales de edición. Por ejemplo, los modos
mayores para lenguajes de programación definen habitualmente comandos
para saltar al principio o al final de una función.

El comportamiento de Emacs puede ser más personalizado aún utilizando
los "modos menores" ("minor modes"). Mientras que sólo se puede
asociar un modo mayor con un buffer a la vez, se puede tener activos
varios modos menores. Por ejemplo, el modo mayor para el lenguaje de
programación C define un modo menor diferente para cada uno de los
estilos de indentación más populares.
#+END_QUOTE

Es decir, un modo mayor viene siendo lo que el [[http://vimdoc.sourceforge.net/htmldoc/filetype.html][filetype]] es para VIM y
los modos menores son como si fueran plugins que puedes utilizar en el
buffer en el que están activos.

*** modeline
El modeline o línea de modos es la línea que aparece abajo del todo y
que se le llama de modos porque entre otras cosa te muestra los modos
que están activos.

[[file:../img/emacs-modeline.png]]

*** window
Un window en Emacs es la región que encierra un buffer y que tiene un modeline.
La siguiente imagen muestra 4 ventanas:

[[file:../img/emacs-windows.png]]

*** frame
Un frame no es más que una ventana GUI.

[[file:../img/frame.png]]

*** meta
Meta es probablemente lo mismo que tu tecla Alt y se abrevia ~M~ en
los comandos, por ejemplo: el comando ~M-x~ significa ~<Alt> - x~.

*** control
Es tu tecla Ctrl y se abrevia ~C~ en los comandos, por ejemplo: el
comando ~C-a~ significa ~<Ctrl> - a~.

*** comando
Un comando es una función del editor que se puede invocar a través de
un /prompt/ que aparece al presionar ~M-x~.
/Es fácil distinguir estas funciones si estás mirando código EmacsLisp
porque tienen la lista (interactive) en su definición./

Por ejemplo, la función =back-to-indentation= es un comando.
Su definición original es (fíjate en la línea con =(interactive)=):

#+BEGIN_SRC elisp
  (defun back-to-indentation ()
    "Move point to the first non-whitespace character on this line."
    (interactive "^")
    (beginning-of-line 1)
    (skip-syntax-forward " " (line-end-position))
    ;; Move back over chars that have whitespace syntax but have the p flag.
    (backward-prefix-chars))
#+END_SRC

Y por el hecho de ser un comando podemos invocarla directamente a
través del prompt sin necesidad de un atajo, es más, al final eres
tú el que decide qué comandos quieres tener mapeados a qué atajos de
teclado:

1. Presiona ~M-x~
2. Escribe ~back-to~ y da al tabulador para que autocomplete
3. Intro

El resultado es el mismo que invocar el comando con un atajo.
